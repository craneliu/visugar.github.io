<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Visugar个人博客</title>
  <subtitle>书写前端，记录心情，以及碎碎念 ~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://visugar.com/"/>
  <updated>2017-06-08T15:26:08.715Z</updated>
  <id>http://visugar.com/</id>
  
  <author>
    <name>张小花</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>select表单元素详解及下拉列表模拟实现</title>
    <link href="http://visugar.com/2017/06/08/select%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E8%AF%A6%E8%A7%A3%E5%8F%8A%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>http://visugar.com/2017/06/08/select表单元素详解及下拉列表模拟实现/</id>
    <published>2017-06-08T11:45:10.000Z</published>
    <updated>2017-06-08T15:26:08.715Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://opfk7lrr2.bkt.clouddn.com/DSC00636.JPG" alt="图书馆前"></p>
<h4 id="原文地址：→看过来"><a href="#原文地址：→看过来" class="headerlink" title="原文地址：→看过来"></a>原文地址：<a href="http://visugar.com/2017/06/08/select%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0%E8%AF%A6%E8%A7%A3%E5%8F%8A%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/">→看过来</a></h4><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p><strong>select</strong> 是HTML表单元素中很常用的一个，其中很重要的几个属性常被忽略，但这几个属性却能帮助我们完成很多的功能，当然，select下拉列表默认样式很不友好，所以更多的时候可以自己模拟实现一个同样功能的下拉菜单。下文先介绍select标签的一些属性及使用，后面再模拟一个相同效果的下拉菜单。</p>
<p>介绍之前先看下demo预览图：</p>
<ol>
<li><p>firefox下select的默认样式：<br><img src="http://opif0c56u.bkt.clouddn.com/firefox-default.png" alt="firefox-default"></p>
</li>
<li><p>chrome下select的默认样式：<br><img src="http://opif0c56u.bkt.clouddn.com/chrome-default.png" alt="chrome-default"></p>
</li>
<li><p>firefox下自定义select下拉列表的icon效果：<br><img src="http://opif0c56u.bkt.clouddn.com/firefox-self.png" alt="firefox-self"></p>
</li>
<li><p>chrome下自定义select下拉列表的icon效果：<br><img src="http://opif0c56u.bkt.clouddn.com/chrome-self.png" alt="chrome-self"></p>
</li>
<li><p>原生js模拟select下拉列表的实现效果(chrome及firefox效果一致)：<br><img src="http://opif0c56u.bkt.clouddn.com/chrome-moni.png" alt="模拟select"></p>
</li>
</ol>
<p>源代码地址→<a href="https://github.com/visugar/FrontEnd-examples/blob/master/02%E6%A8%A1%E6%8B%9Fselect%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8/index.html" target="_blank" rel="external">传送门</a></p>
<p>预览地址→<a href="https://visugar.github.io/FrontEnd-examples/02模拟select下拉列表/index.html" target="_blank" rel="external">传送门</a></p>
<h4 id="1-select表单元素及相关属性（我只是大自然的搬运工）"><a href="#1-select表单元素及相关属性（我只是大自然的搬运工）" class="headerlink" title="1. select表单元素及相关属性（我只是大自然的搬运工）"></a>1. select表单元素及相关属性（我只是大自然的搬运工）</h4><ul>
<li><p><strong>提示</strong><br>select 元素是一种表单控件，可用于在表单中接受用户输入</p>
</li>
<li><p><strong>支持的全局属性</strong></p>
<ul>
<li>仅挑几个属性</li>
<li>autofocus(其值为autofocus): 规定在页面加载后文本区域自动获得焦点。</li>
<li>disabled(值为disabled): 规定禁用该下拉列表。</li>
<li>form(值为form_id): 规定文本区域所属的一个或多个表单。</li>
<li>multiple(值为multiple): 规定可选择多个选项。</li>
</ul>
</li>
<li><p><strong>支持的事件属性</strong></p>
<ul>
<li>挑一个最常用到的额</li>
<li>onchange：当select改变选择时调用的事件句柄。(可以实现三级联动的效果)</li>
</ul>
</li>
<li><p><strong>selected对象的属性及方法</strong></p>
<ul>
<li>挑几个重要的额</li>
<li>options[]：返回包含下拉列表中的所有选项的一个数组。</li>
<li>length：返回下拉列表中的选项数目。</li>
<li>selectIndex：设置或返回下拉列表中被选项目的索引号。</li>
<li>add(): 向下拉列表添加一个选项。</li>
<li>remove(): 从下拉列表中删除一个选项。</li>
</ul>
</li>
<li><p><strong>option标签</strong></p>
<ul>
<li>option元素定义下拉列表中的一个选项（一个条目）。</li>
<li>disabled(值为disabled)：规定此选项应在首次加载时被禁用。</li>
<li>label(值为text)：定义当使用 <optgroup> 时所使用的标注。</optgroup></li>
<li>selected)(值为selected)：规定选项（在首次显示在列表中时）表现为选中状态。</li>
<li>value(text): 定义送往服务器的选项值。</li>
</ul>
</li>
<li><p><strong>option对象的属性</strong></p>
<ul>
<li>几个比较重要的额</li>
<li>defaultSelected：返回 selected 属性的默认值。</li>
<li>disabled:设置或返回选项是否应被禁用。</li>
<li>index：返回下拉列表中某个选项的索引位置。</li>
<li>selected：设置或返回 selected 属性的值。</li>
</ul>
</li>
</ul>
<p><strong>注意</strong>：</p>
<ol>
<li>select本身的样式可用css设置，但对option设置的样式在chrome中不起作用，在Firefox可行</li>
<li>w3c官网的详细解释 → <a href="http://www.w3school.com.cn/tags/tag_select.asp" target="_blank" rel="external">传送门</a></li>
</ol>
<h4 id="2-HTML标签自定义属性（纯属题外话）"><a href="#2-HTML标签自定义属性（纯属题外话）" class="headerlink" title="2. HTML标签自定义属性（纯属题外话）"></a>2. HTML标签自定义属性（纯属题外话）</h4><p><strong>HTML5 data-*自定义属性</strong>：添加data-前缀使属性变成自定义属性，最大的好处是我们可以把所有自定义属性在dataset对象中统一管理。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;student&quot; data-weight=&quot;98&quot;&gt;点击显示&lt;/div&gt;</div><div class="line"></div><div class="line">var student = document.getElementById(&quot;student&quot;);</div><div class="line">student.dataset.cm = &apos;168&apos;; //设置自定义属性</div><div class="line">var stuWeight = studdent.dataset.weight; //获取自定义属性值</div><div class="line"></div><div class="line">student.dataset.birthDate = &apos;19980612&apos;;  //连字符的自定义属性 (例如设置data-birth-date)</div></pre></td></tr></table></figure>
<h4 id="3-自定义下拉列表的图标"><a href="#3-自定义下拉列表的图标" class="headerlink" title="3. 自定义下拉列表的图标"></a>3. 自定义下拉列表的图标</h4><p>select默认样式中的下拉按钮不是很好看，我们可以自己用替张图片替换掉。（效果看文章上面的链接，请忽略我的丑丑的图标额）</p>
<ol>
<li>对select自定义图标时需要设置apperance属性为<code>none</code>(隐藏原有小三角)，并做兼容</li>
<li><p>加上将要替换的自定义图标即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">select&#123;</div><div class="line">    -webkit-appearance: none; /*隐藏默认样式中的小三角*/</div><div class="line">    -moz-appearance: none;</div><div class="line">    background: url(&apos;http://opif0c56u.bkt.clouddn.com/select.gif&apos;) no-repeat scroll right 8px center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>可对option添加背景色</p>
</li>
<li>在firefox中可使用伪元素<code>:before</code>对option添加序号（此处插播一个css添加序号的方法）<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">select&#123;</div><div class="line">    counter-reset: item; //类似于声明计数变量（声明在父元素中）</div><div class="line">&#125;</div><div class="line">select option:before &#123;</div><div class="line">    counter-increment: item;   //要使用的计数名</div><div class="line">    content: counter(item) &quot; . &quot;; //追加前置序号,chrome对option的设置中不起作用</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="4-js模拟select下拉菜单-重头戏"><a href="#4-js模拟select下拉菜单-重头戏" class="headerlink" title="4. js模拟select下拉菜单(重头戏)"></a>4. js模拟select下拉菜单(重头戏)</h4><p>许多时候会觉得select表单特别的不好用，不能自己添加很多的样式，小伙伴们还是自己模拟一个吧！</p>
<ol>
<li><p>html代码结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;sel-wrap&quot;&gt;</div><div class="line">    &lt;div id=&quot;sel-show&quot;&gt;=请选择=&lt;/div&gt;</div><div class="line">    &lt;ul id=&quot;sel-option&quot;&gt;</div><div class="line">        &lt;li class=&quot;item&quot;&gt;早上吃包子&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;item&quot;&gt;中午吃米饭&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;item&quot;&gt;晚上吃面条&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;item&quot;&gt;宵夜吃烧烤&lt;/li&gt;</div><div class="line">        &lt;li class=&quot;item&quot;&gt;睡前喝牛奶&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>下拉按钮的图标跟上面自定义的方式一致（这里不再说了）。</p>
</li>
<li><p>hover到li上时，利用伪元素<code>:before</code>追加一个对勾。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#sel-option li:hover:before &#123;</div><div class="line">    content: &apos;\2714&apos; &apos; &apos;;  //此处为对勾+空格</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>下面说下实现原理：</p>
<ul>
<li><p>下拉菜单的选项为ul中的内容，需要先隐藏起来，且显示的时候是浮在其他内容的上面，此处需要使用position来实现。（即脱离文档流）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#sel-wrap&#123;</div><div class="line">    position: relative;  //设置父元素</div><div class="line">&#125;</div><div class="line">#sel-option&#123;</div><div class="line">    position: absolute;  //设置下拉列项的包裹层</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>点击下拉框时显示下拉列表项</p>
</li>
<li><p>点击列表项时将选中值传递给下拉框并显示，同时下拉项收起（此处的点击事件绑定在父元素中）</p>
</li>
<li><p>当下拉项显示并未选中任何下拉项时，点击下拉框收起下拉项</p>
</li>
<li><p>当下拉项显示并未选中任何下拉项时，点击下拉项以外的任意位置，收起下拉框</p>
</li>
<li><p>最终实现（样式什么的都可以随便改）：</p>
</li>
</ul>
</li>
</ol>
<p><img src="http://opif0c56u.bkt.clouddn.com/firefox-moni.png" alt="最终样式"></p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol>
<li>小花作为菜鸟第一次自己模拟下拉列表的实现，有可能存在代码欠缺，但是为了方便以后使用的时候查询，所以就记录下</li>
<li>欢迎大佬们指点</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://opfk7lrr2.bkt.clouddn.com/DSC00636.JPG&quot; alt=&quot;图书馆前&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;原文地址：→看过来&quot;&gt;&lt;a href=&quot;#原文地址：→看过来&quot; class=&quot;headerlink&quot; title
    
    </summary>
    
      <category term="Web开发" scheme="http://visugar.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css3" scheme="http://visugar.com/tags/css3/"/>
    
      <category term="select" scheme="http://visugar.com/tags/select/"/>
    
  </entry>
  
  <entry>
    <title>预览github项目的html文件新方法</title>
    <link href="http://visugar.com/2017/05/19/%E9%A2%84%E8%A7%88github%E9%A1%B9%E7%9B%AE%E7%9A%84html%E6%96%87%E4%BB%B6%E6%96%B0%E6%96%B9%E6%B3%95/"/>
    <id>http://visugar.com/2017/05/19/预览github项目的html文件新方法/</id>
    <published>2017-05-19T04:32:01.000Z</published>
    <updated>2017-05-19T04:36:21.065Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://opfk7lrr2.bkt.clouddn.com/DSC03498.JPG?imageView/2/w/600/q/90" alt="这是一个很好看的地方"></p>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>关于如何在线预览github中的html文件，其实这是一个很多人知道的东西，但是查资料的时候呢总是找不到正确的答案，并且一开始我也是踩了坑的。</p>
<h4 id="踩坑经历"><a href="#踩坑经历" class="headerlink" title="踩坑经历"></a>踩坑经历</h4><p>搜出来的结果大概就两种：</p>
<ol>
<li><p>第一种是在你打开的源码地址的url地址基础上加<code>http://htmlpreview.github.io/?</code>或者<code>http://htmlpreview.github.com/?(注：填这个还是会转到前面那个前缀去的)</code>前缀。</p>
</li>
<li><p>第二种就是在你的项目branch上添加一个gh-pages分支，然后将你的项目复制一份到这个分支上，然后再进入settings的github pages进行设置就OK了。</p>
</li>
<li><p>总结下上面两种，添加前缀的方式确实比较简单，但是东西多了就会加载很慢，甚至不能正确的显示css样式，对于显示js的效果就更不使用了。所以，赶快放弃吧！创建分支的方式确实是很麻烦额，之前就是感觉麻烦的不得了所以没用这种方式，接下来要介绍的是创建分支的升级版，看下文~</p>
</li>
</ol>
<h4 id="取经啦"><a href="#取经啦" class="headerlink" title="取经啦"></a>取经啦</h4><p>一度感觉小花说话很麻烦，请不要见怪！！！</p>
<ol>
<li><p>第一步就是找到你要展示的repo中的Settings</p>
<p> <img src="http://opif0c56u.bkt.clouddn.com/yulan01.png" alt="Settings"></p>
</li>
<li><p>找到github pages那一栏,在Source中选择<code>master branch</code>,然后save</p>
<p> <img src="http://opif0c56u.bkt.clouddn.com/yulan02.png" alt="Github Pages"></p>
</li>
<li><p>放大你的眼睛找到你自己的这串地址<br> <img src="http://opif0c56u.bkt.clouddn.com/yulan03.png" alt="url前缀"></p>
</li>
<li><p>然后就可以愉快的预览了</p>
<p> <img src="http://opif0c56u.bkt.clouddn.com/yulan04.png" alt="快去预览"></p>
</li>
<li><p>完美~</p>
</li>
</ol>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>刚开始自己踩坑发现不对劲但又苦于找不到解决方法，后来偶然有个同学告诉我这样纸，所以，我就只是枚小小的搬运工而已~</p>
<h6 id="给看完本文的孩纸们一个爱的么么哒"><a href="#给看完本文的孩纸们一个爱的么么哒" class="headerlink" title="给看完本文的孩纸们一个爱的么么哒"></a>给看完本文的孩纸们一个爱的么么哒</h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://opfk7lrr2.bkt.clouddn.com/DSC03498.JPG?imageView/2/w/600/q/90&quot; alt=&quot;这是一个很好看的地方&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class
    
    </summary>
    
      <category term="Web开发" scheme="http://visugar.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="github" scheme="http://visugar.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>CSS3饼状loading效果</title>
    <link href="http://visugar.com/2017/05/17/CSS3%E9%A5%BC%E7%8A%B6loading%E6%95%88%E6%9E%9C/"/>
    <id>http://visugar.com/2017/05/17/CSS3饼状loading效果/</id>
    <published>2017-05-17T00:36:33.000Z</published>
    <updated>2017-05-18T11:45:40.519Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://opfk7lrr2.bkt.clouddn.com/DSC00871.JPG?imageView/2/w/600/q/90" alt="武功山的秋天"></p>
<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a><strong>写在前面</strong></h4><p>（附录有源码及效果）</p>
<p>之前碰到一个小练习，就是用纯CSS3来写饼状的loading效果，之前着实没有写过这玩意儿，小花完全没头绪，然后参考了张鑫旭老师的<a href="http://www.zhangxinxu.com/wordpress/2014/04/css3-pie-loading-waiting-animation/" target="_blank" rel="external">CSS3实现鸡蛋饼饼状图loading等待转转转</a>，还有些别的东西，用一种看起来有一点类似但是好像又不一样的方式完成了同样的效果，题目要求的大概就是这个样子：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/css3%E9%A5%BC%E7%8A%B6loading%E5%9B%BE.gif" alt="look me"></p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a><strong>开始</strong></h4><p>琢磨了一下，睡一觉起来画了个图，理顺了一下，不过感觉此图有点难意会啊啊啊啊啊，没关系，小花会在后文一点一点解释哒~(红跟粉代表颜色，斜杠后面是z-index的值)<br><img src="http://opif0c56u.bkt.clouddn.com/862022799.jpg" alt="饼状loading流程图"></p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>这个东西分为两部分：外圈和内圆。颜色这东西都自定义啦，不过我画的的圈圈好像有点太大，然后动画时间是随便设的，反正转起来看着感觉有点怪怪的额</p>
<p>先上html结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;con-wrap&quot;&gt;</div><div class="line"></div><div class="line">    &lt;!--外圈--&gt;</div><div class="line">    &lt;div class=&quot;out-round&quot;&gt;&lt;/div&gt;</div><div class="line">    </div><div class="line">    &lt;!--内圆，里面有半圆四个--&gt;</div><div class="line">    &lt;div class=&quot;in-round&quot;&gt;</div><div class="line">        &lt;div class=&quot;lt-round&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div class=&quot;lt-mask&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div class=&quot;rt-round&quot;&gt;&lt;/div&gt;</div><div class="line">        &lt;div class=&quot;rt-mask&quot;&gt;&lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<p>外圈和内圆是通过position定位重合在一起，实质上外圈转完2圈，内圆的红色和粉色才各转完1圈（内圆的全程包括红色从1到0、粉色从1到0），所以内圆的动画时间应该是外圈的两倍！！！</p>
<ul>
<li><strong>外圈</strong></li>
</ul>
<p>外圈很简单，设置<code>border-radius:50%</code>即可画出一个圆，然后设置三条边框为红色，另外一条为透明，即画出了四分之三个圆边框（即外圆）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.out-round &#123;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">            border-radius: 50%;</div><div class="line">            margin: 150px auto;</div><div class="line">            border: 3px solid #FF298C;</div><div class="line">            border-left: 3px solid transparent;</div><div class="line">            animation: outRound 1s linear infinite running;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://opif0c56u.bkt.clouddn.com/%E5%9B%9B%E5%88%86%E4%B9%8B%E4%B8%89%E4%B8%AA%E5%9C%88.png" alt="四分之三个圆边框"></p>
<p>接下来是外圈的动画，为其设置的动画就是旋转一圈，infinite表示无限次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@keyframes outRound &#123;</div><div class="line">            0% &#123;</div><div class="line">                transform: rotate(120deg)</div><div class="line">            &#125;</div><div class="line">            100% &#123;</div><div class="line">                transform: rotate(-240deg)</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>其中<code>rotate(120deg)</code>为旋转起始位置，可根据实际情况调整。</p>
<p>至此外圈就完成了，比较麻烦的是下面的内圆，不过根据图示应该是可以想象的。</p>
<ul>
<li><strong>内圆</strong></li>
</ul>
<p>此处有四个半圆，左边两个，右边两个（round为红色，mask为粉色），动画主要通过改变两个红色半圆的<code>z-index</code>值来控制各个半圆显示的优先顺序。内圆的css实现部分为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/*左边两个半圆*/</div><div class="line">        .lt-round, .lt-mask &#123;</div><div class="line">            position: absolute;</div><div class="line">            width: 35px;</div><div class="line">            height: 70px;</div><div class="line">            border-radius: 35px 0 0 35px;</div><div class="line">            transform-origin: right center;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">/*右边两个半圆*/</div><div class="line">        .rt-round, .rt-mask &#123;</div><div class="line">            position: absolute;</div><div class="line">            left: 50%;</div><div class="line">            width: 35px;</div><div class="line">            height: 70px;</div><div class="line">            border-radius: 0 35px 35px 0;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>下面过程描述内圆的动画全程（其中右边的粉色全程不需要动，右边红色部分只需要改变<code>z-index</code>的值来改变显示的优先级，从而实现显示和隐藏的效果来配合补充左半边的圆。）：</p>
<p>1.初始设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">红左 z-index：3</div><div class="line">粉1  z-index：2</div><div class="line"></div><div class="line">红右 z-index：1</div><div class="line">粉2  z-index：0</div></pre></td></tr></table></figure>
<p>模型图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/%E7%99%BE%E5%88%86%E4%B9%8B0.png" alt="模型图1"></p>
<p>视觉效果图(忽略中间的白线)：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/01.png" alt="视觉效果图"></p>
<p>2.左边红色旋转完180度时（逆时针旋转所以是360→180→0）</p>
<p>模型图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/%E7%99%BE%E5%88%86%E4%B9%8B25.png" alt="模型图2"></p>
<p>视觉效果图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/02.png" alt="视觉效果图"></p>
<p>3.左边红色转完到0度时（此时左右两边的红色半圆被粉色覆盖）</p>
<p>模型图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/%E7%99%BE%E5%88%86%E4%B9%8B50.png" alt="模型图3"></p>
<p>视觉效果图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/03.png" alt="视觉效果图"></p>
<p>4.粉色半圆重复之前红色半圆的动画（即左边粉色360→180→0）</p>
<p>模型图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/%E7%99%BE%E5%88%86%E4%B9%8B75.png" alt="模型图4"></p>
<p>视觉效果图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/04.png" alt="视觉效果图"></p>
<p>5.当左边粉色旋转到0度时，全部半圆回到了最初始的状态，整个动画即完成（在相同时间下外圈完成了2次的动画）。</p>
<p>模型图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/%E7%99%BE%E5%88%86%E4%B9%8B100.png" alt="模型图5"></p>
<p>视觉效果图：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/05.png" alt="视觉效果图"></p>
<h4 id="动画代码部分"><a href="#动画代码部分" class="headerlink" title="动画代码部分"></a><strong>动画代码部分</strong></h4><p>1.前半程为左边红色旋转一周，后半程为粉色旋转一周。动画实现如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/*左边红色完成第一圈的旋转*/</div><div class="line">@keyframes ltRound &#123;</div><div class="line">            0% &#123;</div><div class="line">                transform: rotate(360deg);</div><div class="line">            &#125;</div><div class="line">            24.9% &#123;</div><div class="line">                z-index: 3;</div><div class="line">            &#125;</div><div class="line">            25% &#123;</div><div class="line">                z-index: 1;</div><div class="line">                transform: rotate(180deg);</div><div class="line">            &#125;</div><div class="line">            50% &#123;</div><div class="line">                transform: rotate(0deg);</div><div class="line">            &#125;</div><div class="line">            74.9% &#123;</div><div class="line">                z-index: 1;</div><div class="line">            &#125;</div><div class="line">            75%, 100% &#123;</div><div class="line">                z-index: 3;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">/*右边红色圆通过z-index来控制显示和隐藏，从而达到在适当时间配上左半圆的效果*/</div><div class="line">@keyframes rtRound &#123;</div><div class="line">            0%, 24.9% &#123;</div><div class="line">                z-index: 1;</div><div class="line">            &#125;</div><div class="line">            25% &#123;</div><div class="line">                z-index: -3;</div><div class="line">            &#125;</div><div class="line">            74.9% &#123;</div><div class="line">                z-index: -3;</div><div class="line">            &#125;</div><div class="line">            75%, 100% &#123;</div><div class="line">                z-index: 1;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">/*左边粉色完成第二圈的旋转*/</div><div class="line">@keyframes ltMask &#123;</div><div class="line">            0%, 25%, 50% &#123;</div><div class="line">                transform: rotate(360deg);</div><div class="line">            &#125;</div><div class="line">            75% &#123;</div><div class="line">                transform: rotate(180deg);</div><div class="line">            &#125;</div><div class="line">            100% &#123;</div><div class="line">                transform: rotate(0deg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>2.在全部代码未完成时，可以将动画时间设大一点，这样便于观察，搞完了再设回去就OK了。</p>
<p>3.由于动画是匀速变化的，但是z-index的值不能匀速变化，所以只能在某个很短时间内去改变z-index的值。这样才能达到效果（突然感觉这种实现好像也不是很好）</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h4><ol>
<li>没做兼容，在chrome中无异常，别的我就不太知道了</li>
<li>只是用来练习练习，实际上不一定会用到，但是里面几个知识点还是hei有用滴</li>
<li>小花是小白，对很多东西都还没整明白，欢迎大佬们指点指点~</li>
<li>这几个图画的我心好累，sei能给小花推荐个好用点的额</li>
</ol>
<h4 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a><strong>源代码</strong></h4><p><a href="https://github.com/visugar/ife2017/blob/master/04nuomi/task413/index.html" target="_blank" rel="external">源码地址</a></p>
<p><a href="https://visugar.github.io/ife2017/04nuomi/task413/index.html" target="_blank" rel="external">预览地址</a></p>
]]></content>
    
    <summary type="html">
    
      通过z-index值的改变来实现CSS3饼状loading效果
    
    </summary>
    
      <category term="Web开发" scheme="http://visugar.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css3" scheme="http://visugar.com/tags/css3/"/>
    
      <category term="z-index" scheme="http://visugar.com/tags/z-index/"/>
    
  </entry>
  
  <entry>
    <title>RegExp（正则表达式）常用要点小结</title>
    <link href="http://visugar.com/2017/05/11/RegExp%EF%BC%88%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89%E5%B8%B8%E7%94%A8%E8%A6%81%E7%82%B9%E5%B0%8F%E7%BB%93/"/>
    <id>http://visugar.com/2017/05/11/RegExp（正则表达式）常用要点小结/</id>
    <published>2017-05-11T08:17:05.000Z</published>
    <updated>2017-05-18T11:42:05.968Z</updated>
    
    <content type="html"><![CDATA[<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p><img src="http://upload-images.jianshu.io/upload_images/1727565-eb70c2f7892d2171.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="香港"><br>正则表达式用到的地方很多，但是每次很久不用就全忘光了，每次都要重新看一遍文档，为了节省时间，把它的一些基本要点画总结在一张图片中，这样方便以后查看。</p>
<p>PS：细节的东西还是需要看详细点的文档。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1727565-65f035c9dc1f499a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RegExp小结"></p>
<p><a href="http://opohu5hxr.bkt.clouddn.com/RegExp%28%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%29.png" target="_blank" rel="external">原图传送门</a></p>
]]></content>
    
    <summary type="html">
    
      把正则表达式的是十点放到一张图上便于日后查询
    
    </summary>
    
      <category term="划重点" scheme="http://visugar.com/categories/%E5%88%92%E9%87%8D%E7%82%B9/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="正则表达式" scheme="http://visugar.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="文档" scheme="http://visugar.com/tags/%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>中文技术文档规范-改自阮一峰老师</title>
    <link href="http://visugar.com/2017/05/10/%E4%B8%AD%E6%96%87%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83-%E6%94%B9%E8%87%AA%E9%98%AE%E4%B8%80%E5%B3%B0%E8%80%81%E5%B8%88/"/>
    <id>http://visugar.com/2017/05/10/中文技术文档规范-改自阮一峰老师/</id>
    <published>2017-05-10T01:08:30.000Z</published>
    <updated>2017-05-18T11:41:47.440Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1727565-e450ee7e521b3f2f.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="湖北石首"></p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>以前从来去想一篇技术文章要怎么架构，总是随自己想到什么写什么，然后看到了阮一峰老师的总结，就把它改成了思维导图，以便记忆查询。</p>
<p>原文地址：<a href="https://github.com/ruanyf/document-style-guide" target="_blank" rel="external">https://github.com/ruanyf/document-style-guide</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1727565-a07e07f5691f0e14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中文技术文档写作规范"></p>
<p><a href="http://opohu5hxr.bkt.clouddn.com/%E4%B8%AD%E6%96%87%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83-20170427.png" target="_blank" rel="external">原图传送门</a></p>
]]></content>
    
    <summary type="html">
    
      根据阮一峰老师对中文技术文档规范的总结改成的思维导图
    
    </summary>
    
      <category term="划重点" scheme="http://visugar.com/categories/%E5%88%92%E9%87%8D%E7%82%B9/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="文档" scheme="http://visugar.com/tags/%E6%96%87%E6%A1%A3/"/>
    
      <category term="写作规范" scheme="http://visugar.com/tags/%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>菜鸟张小花之多种前端布局实现</title>
    <link href="http://visugar.com/2017/05/06/%E8%8F%9C%E9%B8%9F%E5%BC%A0%E5%B0%8F%E8%8A%B1%E4%B9%8B%E5%A4%9A%E7%A7%8D%E5%89%8D%E7%AB%AF%E5%B8%83%E5%B1%80%E5%AE%9E%E7%8E%B0/"/>
    <id>http://visugar.com/2017/05/06/菜鸟张小花之多种前端布局实现/</id>
    <published>2017-05-06T08:09:57.000Z</published>
    <updated>2017-05-11T23:59:37.472Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://opfk7lrr2.bkt.clouddn.com/DSC07777.JPG?imageView/2/w/600/q/90" alt="look me"></p>
<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ul>
<li>由于知识有限，有的内容可能有点小错误什么的，仅供参考参考，欢迎大佬们指正<a id="more"></a>，小花在这里谢过~</li>
<li>小贴士（to freshman）：给每个块都加上颜色，更好辨识。</li>
<li>关于代码：这里给出的都是css部分，html部分用最常规的结构就好啦</li>
</ul>
<h3 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1. 水平居中"></a>1. 水平居中</h3><ul>
<li>方法一：margin:0 auto; （最常用的居中布局方式）</li>
<li>方法二：text-align和inline-block的结合（设置父元素的text-align为center）。<blockquote>
<p>这种方式最好应用于图片、按钮、文字之类的居中模式，否则就需要借助inline-block来进行居中布局。</p>
</blockquote>
</li>
<li>方法三：position绝对定位来实现居中布局。<blockquote>
<p>适用于块级元素不给出宽高的情况下(需要借助transtrom的tanslateX方法)。</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#parent&#123;</div><div class="line">	position: relative;</div><div class="line">&#125;</div><div class="line">#child&#123;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	left: 50%;</div><div class="line">	transform: translateX(-50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>方法四：利用flex弹性布局的一个属性。</p>
<blockquote>
<p>子元素宽度已知的情况下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#parent&#123;</div><div class="line">	display: flex;</div><div class="line">	justify-content: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>其他还有很多方法，一般用的不太多。并且各种方法优缺点不一样，可选择性使用。</p>
</li>
</ul>
<h3 id="2-水平居中及垂直居中"><a href="#2-水平居中及垂直居中" class="headerlink" title="2. 水平居中及垂直居中"></a>2. 水平居中及垂直居中</h3><ul>
<li>方法一：先说一种神奇的方式吧，<blockquote>
<ol>
<li>子元素 div 绝对定位</li>
<li>父元素需要被定位</li>
<li>子元素 top、bottom、left、right 四个位置值均为 0</li>
<li>子元素 margin: auto;</li>
</ol>
</blockquote>
</li>
</ul>
<p>下面代码是可以实现的，但还有点问题，大家帮小花看看~</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#parent&#123;</div><div class="line">	width: 100%;</div><div class="line">	height:100%;</div><div class="line">	position: fixed;</div><div class="line">&#125;</div><div class="line">#child&#123;</div><div class="line">	width: 400px;</div><div class="line">	height: 200px;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	bottom: 0;</div><div class="line">	left: 0;</div><div class="line">	right: 0;</div><div class="line">	margin: auto;</div><div class="line">	background-color: #ccc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方式二：利用position的绝对定位及负边框来实现。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> #parent&#123;</div><div class="line">	position: fixed;</div><div class="line">	width: 100%;</div><div class="line">	height: 100%;</div><div class="line">&#125;</div><div class="line">#child&#123;</div><div class="line">	position: absolute;</div><div class="line">    left: 50%;</div><div class="line">    top: 50%;</div><div class="line">    width: 400px;</div><div class="line">    height: 200px;</div><div class="line">    margin-top: -100px;</div><div class="line">    margin-left: -200px;</div><div class="line">    background-color: #ccc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>对于未给出宽高的元素，又需要请transform登场了，同时需要做好各浏览器的兼容。对于我这种懒癌患者，就不给出兼容代码嘞~</p>
</blockquote>
<ul>
<li>其他应该还有一些方法，暂时还没想到，等写出来了再补补（哦对了，忘了说flex了，算了还是不写了）</li>
</ul>
<h3 id="3-左边固定右边自适应的两列布局"><a href="#3-左边固定右边自适应的两列布局" class="headerlink" title="3. 左边固定右边自适应的两列布局"></a>3. 左边固定右边自适应的两列布局</h3><p>我猜吧，大家对这种布局方式最熟悉不过了，平时用的也会比较多，所以呢，你们写的应该都会比我的好~</p>
<ul>
<li>方式一：float+margin的方式<blockquote>
<p>这种方式一定要记得给父元素清除浮动啊，不然就尴尬了呢，这里插播一种全局性(这个词似乎不太对)的清除浮动的伪元素方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.clearfix:after &#123;</div><div class="line">    content: &apos;.&apos;;</div><div class="line">    height: 0;</div><div class="line">    overflow: hidden;</div><div class="line">    clear: both;</div><div class="line">    display: block;</div><div class="line">    visibility: hidden;</div><div class="line">&#125;</div><div class="line">.clearfix &#123;</div><div class="line">    zoom: 1;  &lt;!--hack--&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
</ul>
<p>看起来有点小复杂啊，这里不分析这种方法的原理，记住就好了。当然你也可以直接借助触发BFC的方式来解决（偷偷告诉你，常用的方式就是给你的父元素设置<code>overflow: hidden;</code>啦）。</p>
<p>哦+语气~好像跑偏了，说好的布局呢，见下诉代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#left&#123;</div><div class="line">	float: left;</div><div class="line">	width: 100px;</div><div class="line">&#125;</div><div class="line">#right&#123;</div><div class="line">	margin-left: 120px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方式二：float+overflow的方式</li>
</ul>
<p>这就是传说中利用BFC的规则来实现两列布局啊啊啊！</p>
<blockquote>
<p>这种方式直接不需要清除浮动什么的就可以了，也不会影响前后文，用起来比较爽丫。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#left&#123;</div><div class="line">	float: left;</div><div class="line">	width: 100px;</div><div class="line">	margin-right: 20px; &lt;!--好歹留个空啊嘿嘿--&gt;</div><div class="line">&#125;</div><div class="line">#right&#123;</div><div class="line">	overflow: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方式三：float+margin+position的方式</li>
</ul>
<p>这个方式呢也用到过，但是要考虑的比较多一点，不过其实也还好。<br>接下来请看实现代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#parent&#123;</div><div class="line">	position: relative;</div><div class="line">&#125;</div><div class="line">#left&#123;</div><div class="line">	float: left;</div><div class="line">	width: 100px;</div><div class="line">	background-color: #ccc;</div><div class="line">&#125;</div><div class="line">#right&#123;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	left: 120px;</div><div class="line">	background-color:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>这种方式实现起来很简单，但是对后文是有影响的，需要自己解决一下，懒小花就不写啦~</p>
</blockquote>
<ul>
<li><p>方式四：flex方式</p>
<blockquote>
<p>这个呢，坑肯定是比较多的，建议用在小范围的布局，当然某些时候用起来确实比较爽歪歪啦</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#parent&#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div><div class="line">#left&#123;</div><div class="line">	width: 100px;</div><div class="line">	margin-right: 20px;</div><div class="line">&#125;</div><div class="line">#right&#123;</div><div class="line">	flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>其他的吧，我暂时还没用到也没写到~网上一搜会有好多好多精讲的。</p>
</li>
</ul>
<h3 id="4-左边自适应右边固定"><a href="#4-左边自适应右边固定" class="headerlink" title="4. 左边自适应右边固定"></a>4. 左边自适应右边固定</h3><p>话说其实我就只写了一种方法，我都有点不好意思放上来了，不管了，小花的脸皮比较厚，不怕！</p>
<ul>
<li>方式一： 当然还是position<br>反正很多情况都可以用position来解决，但是，同时也会有一些其他问题出现，所以，自行思考用不用~<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#parent &#123;</div><div class="line">	position: relative;</div><div class="line">&#125;</div><div class="line">#left &#123;</div><div class="line">	margin-right:220px;</div><div class="line">&#125;</div><div class="line">#right &#123;</div><div class="line">    position: absolute;</div><div class="line">    right:0;</div><div class="line">    top:0;</div><div class="line">    width: 200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-两边固定中间自适应的三列布局"><a href="#5-两边固定中间自适应的三列布局" class="headerlink" title="5. 两边固定中间自适应的三列布局"></a>5. 两边固定中间自适应的三列布局</h3><p>其实这个布局用的也挺多的啊哈，嗯，昨天写的作业就是这个！</p>
<ul>
<li>方式一：纯float方式<blockquote>
<p>注意：</p>
<ol>
<li>左侧元素与右侧元素优先渲染，分别向左和向右浮动</li>
<li>中间元素在文档流的最后渲染，自动插入到左右两列元素的中间，随后设置 margin 左右边距分别为左右两列的宽度，将中间元素调整到正确的位置。</li>
</ol>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.left&#123;</div><div class="line">	float: left;</div><div class="line">	width: 200px;</div><div class="line">	height: 200px;</div><div class="line">&#125;</div><div class="line">.right&#123;</div><div class="line">	float: right;</div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">&#125;</div><div class="line">.middle&#123;</div><div class="line">	margin:0 120px 0 220px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>但凡用float的时候都要想一下父元素上清除浮动这个问题！</p>
</blockquote>
<ul>
<li><p>方式二：position的绝对定位</p>
<p>  其实感觉跟float的原理差不多，都是将左右两侧的块先固定好，再对中间部分进行处理，只不过自己可以在不同情况下选择float或者position。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">.parent&#123;</div><div class="line">	position: relative;</div><div class="line">&#125;</div><div class="line">.left&#123;</div><div class="line">	position: absolute;</div><div class="line">	width: 200px;</div><div class="line">	height: 200px;</div><div class="line">	top: 0;</div><div class="line">	left: 0;</div><div class="line">&#125;</div><div class="line">.right&#123;</div><div class="line">	position: absolute;</div><div class="line">	top: 0;</div><div class="line">	right: 0;</div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">&#125;</div><div class="line">.middle&#123;</div><div class="line">	margin:0 120px 0 220px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>方式三：flex的弹性布局</li>
</ul>
<p>不得不说的是其实很多布局都可以用flex来实现(简单粗暴嘿嘿)，但是flex的兼容性不是很好，并且还有别问题，所以保险起见还是选择常用的，这里简单介绍下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.parent&#123;</div><div class="line">	display: flex;</div><div class="line">&#125;</div><div class="line">.left&#123;</div><div class="line">	width: 200px;</div><div class="line">	height: 200px;</div><div class="line">&#125;</div><div class="line">.right&#123;</div><div class="line">	width: 100px;</div><div class="line">	height: 100px;</div><div class="line">&#125;</div><div class="line">.middle&#123;</div><div class="line">	flex: 1;</div><div class="line">	margin:0 20px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>方式四：最后该淘宝的<code>双翼布局</code>闪亮登场了</li>
</ul>
<p>要注意的是这种布局方式需要将主栏优先渲染，然后再加上两边的翅膀，即双翼，不过话又说话来，虽然小花是按照这个套路写的，但也不确定自己写的就是双翼布局。<br>为了不误人子弟，在这先说明只是参考参考哟（欢迎大佬纠正）~</p>
<blockquote>
<ul>
<li>第一步，先将主栏左浮动，并设宽度为100%，即铺满父元素</li>
<li>第二步，将左栏左浮动，并设左外边距为-100%</li>
<li>第三步，将右栏左浮动，并设左外边距为负的自身宽度</li>
<li>第四步，设置主栏，嘿嘿，这时候不管你使用什么方法都达不到效果，解决办法就是给主栏的内容加一个包裹层，并设左右外边距为左右两侧的宽度。</li>
<li>第五步，好了，完美！（但是别忘了，要清除浮动哦~）</li>
</ul>
</blockquote>
<h3 id="6-是时候小结一波了"><a href="#6-是时候小结一波了" class="headerlink" title="6. 是时候小结一波了"></a>6. 是时候小结一波了</h3><ul>
<li>首先，每种方式都小试了一下，基本上效果是可以达到的，当然实际情况中会比较复杂，你会遇到各种各样的麻烦，祝你好运~</li>
<li>每种方式的优缺点其实对于我这种萌新来说也是比较懵，只是这几天写了几个作业才想到要小小总结下的</li>
<li>第一次用markdown写文字棒棒哒，不要介意某写地方可能写错了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://opfk7lrr2.bkt.clouddn.com/DSC07777.JPG?imageView/2/w/600/q/90&quot; alt=&quot;look me&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由于知识有限，有的内容可能有点小错误什么的，仅供参考参考，欢迎大佬们指正
    
    </summary>
    
      <category term="Web开发" scheme="http://visugar.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS布局" scheme="http://visugar.com/tags/CSS%E5%B8%83%E5%B1%80/"/>
    
      <category term="web" scheme="http://visugar.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>hexo从零开始到搭建完整</title>
    <link href="http://visugar.com/2017/05/04/hexo%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B0%E6%90%AD%E5%BB%BA%E5%AE%8C%E6%95%B4/"/>
    <id>http://visugar.com/2017/05/04/hexo从零开始到搭建完整/</id>
    <published>2017-05-04T08:16:15.000Z</published>
    <updated>2017-05-18T11:45:44.964Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://opif0c56u.bkt.clouddn.com/look-me.png?imageView/2/w/600/q/90" alt="look me"></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放<a id="more"></a>，不好找，所以才想着自己搭建一个人博客网站，现在大家用<code>hexo</code>比较多，也比较方便，并且能使用的主题也很多，所以小花就用她啦~</p>
<h3 id="耍起来"><a href="#耍起来" class="headerlink" title="耍起来"></a>耍起来</h3><p>由于小花的电脑在搭建博客之前就有了各种环境，但是对于没有任何基础的人来讲，我觉得还是从源头开始讲会好一点，就像教别人做菜，总得把所有的用料及步骤说清楚对吧？（大佬们可以自动忽略啊啊啊啊~）</p>
<h4 id="1-安装Git-Bash"><a href="#1-安装Git-Bash" class="headerlink" title="1. 安装Git Bash"></a>1. <strong>安装Git Bash</strong></h4><p>我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的<a href="https://git-for-windows.github.io/" target="_blank" rel="external">Git Bash</a>, 我的是windows环境，所以下载windows版本并安装就可以了。</p>
<ul>
<li><a href="https://git-for-windows.github.io/" target="_blank" rel="external">下载地址</a></li>
<li>安装步骤：双击下载好的exe文件，一路next就好啦</li>
<li><p>安装好后，打开gitbash，查看版本：</p>
<ul>
<li><p>命令：<code>git version</code> (写这篇博客的时候最新版本：2.12.2)</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/gitversion.png" alt="git version"></p>
</li>
</ul>
</li>
<li>然后你就可以在这里发挥你的聪明才智了</li>
</ul>
<h4 id="2-安装NodeJs"><a href="#2-安装NodeJs" class="headerlink" title="2. 安装NodeJs"></a>2. <strong>安装NodeJs</strong></h4><p>Hexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧</p>
<ul>
<li><a href="https://nodejs.org/en/" target="_blank" rel="external">下载地址</a>(说明：LTS为长期支持版，Current为当前最新版)</li>
<li>安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 <code>Add to PATH</code> ,这样你就不用自己去配置电脑上环境变量了，装完在按 <code>win + r</code> 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。</li>
<li><p>查看版本：</p>
<ul>
<li><p>命令：<code>node -v</code></p>
<p><img src="http://opif0c56u.bkt.clouddn.com/node-v.png" alt="node-version"></p>
</li>
</ul>
</li>
<li>又到自由发挥的时候了</li>
</ul>
<h4 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. <strong>安装hexo</strong></h4><p>看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。</p>
<ul>
<li>先创建一个文件夹（用来存放所有blog的东西），然后<code>cd</code>到该文件夹下。</li>
<li>安装hexo命令：npm i -g hexo</li>
<li><p>安装完成后，查看版本：</p>
<p>  <img src="http://opif0c56u.bkt.clouddn.com/hexo-v.png" alt="npm-v"></p>
</li>
<li><p>初始化命令：<code>hexo init</code> ，初始化完成之后打开所在的文件夹可以看到以下文件：</p>
<p>  <img src="http://opif0c56u.bkt.clouddn.com/hexo-init.png" alt="myblog"></p>
</li>
<li>解释一下：<ul>
<li>node_modules：是依赖包</li>
<li>public：存放的是生成的页面</li>
<li>scaffolds：命令生成文章等的模板</li>
<li>source：用命令创建的各种文章</li>
<li>themes：主题</li>
<li>_config.yml：整个博客的配置</li>
<li>db.json：source解析所得到的</li>
<li>package.json：项目所需模块项目的配置信息</li>
</ul>
</li>
<li>做好这些前置工作之后接下来的就是各种配配配置了。</li>
</ul>
<h4 id="4-搭桥到github"><a href="#4-搭桥到github" class="headerlink" title="4. 搭桥到github"></a>4. <strong>搭桥到github</strong></h4><ul>
<li><p>没账号的创建账号，有账号的看下面。</p>
<ol>
<li><p>创建一个repo，名称为<code>yourname.github.io</code>, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/new-repo.png" alt="new-repo"><br><img src="http://opif0c56u.bkt.clouddn.com/create-repo.png" alt="create-repo"></p>
</li>
<li><p>回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/username.png" alt="username"><br><img src="http://opif0c56u.bkt.clouddn.com/email.png" alt="email"></p>
</li>
<li><p>创建SSH<br>在gitbash中输入：<code>ssh-keygen -t rsa -C &quot;youremail@example.com</code>，生成ssh。然后按下图的方式找到<code>id_rsa.pub</code>文件的内容。</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/ssh.png" alt="ssh-key"></p>
</li>
<li><p>将上面获取的ssh放到github中：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/settings.png" alt="settings"><br><img src="http://opif0c56u.bkt.clouddn.com/ssh-key.png" alt="ssh-key"><br>添加一个 <code>New SSH key</code> ，title随便取，key就填刚刚那一段。</p>
</li>
<li><p>在gitbash中验证是否添加成功：<code>ssh -T git@github.com</code></p>
</li>
<li><p>完成下一步你就成功啦！</p>
</li>
</ol>
</li>
</ul>
<h4 id="5-一步之遥"><a href="#5-一步之遥" class="headerlink" title="5. 一步之遥"></a>5. <strong>一步之遥</strong></h4><ul>
<li>用编辑器打开你的blog项目，修改<code>_config.yml</code>文件的一些配置(冒号之后都是有一个半角空格的)：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<ul>
<li>回到gitbash中，进入你的blog目录，分别执行以下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo server</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注：hexo 3.0把服务器独立成个别模块，需要单独安装：<code>npm i hexo-server</code>。</p>
<ul>
<li><p>打开浏览器输入：<code>http://localhost:4000</code></p>
</li>
<li><p>接着你就可以遇见天使的微笑了~</p>
</li>
</ul>
<h4 id="6-上传到github"><a href="#6-上传到github" class="headerlink" title="6. 上传到github"></a>6. <strong>上传到github</strong></h4><ul>
<li>先安装一波：<code>npm install hexo-deployer-git --save</code>（这样才能将你写好的文章部署到github服务器上并让别人浏览到）</li>
<li>执行命令(建议每次都按照如下步骤部署)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
</li>
</ul>
<p>注意deploy的过程中要输入你的username及passward。如下：</p>
<p><img src="http://opif0c56u.bkt.clouddn.com/deploy.png" alt="deploy"></p>
<ul>
<li>在浏览器中输入<code>http://yourgithubname.github.io</code>就可以看到你的个人博客啦，是不是很兴奋！</li>
<li>感觉gitbash中东西太多的时候输入<code>clear</code>命令清空。</li>
</ul>
<h4 id="7-绑定个人域名"><a href="#7-绑定个人域名" class="headerlink" title="7. 绑定个人域名"></a>7. <strong>绑定个人域名</strong></h4><ul>
<li>不想绑定的自行忽略</li>
<li>第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的<a href="http://visugar.com">visugar.com</a>, DNS也是顺道在那买的。</li>
<li>第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是<code>visugar.com</code>，只能添加一个哦。</li>
<li>到DNS中添加一条记录：<br>  <img src="http://opif0c56u.bkt.clouddn.com/dns-note.png" alt="dns-note"><br>其中ip地址为你的github的地址，可在cmd中ping一下就能看到(<code>ping yourname.github.io</code>)：<br>  <img src="http://opif0c56u.bkt.clouddn.com/githubip.png" alt="github-ip"></li>
<li>接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~</li>
</ul>
<h4 id="8-修改及配置主题"><a href="#8-修改及配置主题" class="headerlink" title="8. 修改及配置主题"></a>8. <strong>修改及配置主题</strong></h4><ul>
<li>hexo初始化之后默认的主题是<code>landscape</code> , 然后你可以去<a href="https://hexo.io/themes/" target="_blank" rel="external">这个地址</a>里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是<code>hueman</code>,看起来挺不错，至少是我喜欢的类型。</li>
</ul>
<p><img src="http://opif0c56u.bkt.clouddn.com/themes.png" alt="themes"></p>
<ul>
<li>跟该主题相关的配置在<code>themes/hueman/_config.yml</code>里面,然后根据你的需要在这配配配就行了。</li>
</ul>
<p><img src="http://opif0c56u.bkt.clouddn.com/themes-config.png" alt="themes-config"></p>
<ul>
<li>有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦</li>
<li><p>下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似):</p>
<p>  <strong>在导航栏添加点东西</strong></p>
<ul>
<li>例如我添加了一个更新日志的模块。</li>
<li>在主题的配置文件中，menu添加一栏：<code>Board: /board</code>。</li>
<li>然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。</li>
<li>在主题的<code>hueman/langulages/zh-CN.yml</code>中的index适当的位置加：<code>board: &#39;更新日志&#39;</code>，位置和名字是你自己设定。</li>
<li><p>重新部署，然后就OK了</p>
<p><strong>在侧边栏添加点东西</strong></p>
</li>
<li>回到你的主题的配置文件中，找到<code>widgets</code>一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫<code>communiation</code>且放在了第二行。</li>
<li>在上面所提到的<code>zh-CN.yml</code>文件中找到sidebar一栏，添加<code>communiation: &#39;你要设的名称&#39;</code>。</li>
<li>在<code>hueman/layout/widget</code>中添加一个<code>communiation.ejs</code>,填入模板<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;% if (site.posts.length) &#123; %&gt;</div><div class="line">    &lt;div class=&quot;widget-wrap widget-list&quot;&gt;</div><div class="line">        &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&apos;sidebar.communiation&apos;) %&gt;&lt;/h3&gt;</div><div class="line">        &lt;div class=&quot;widget&quot;&gt;</div><div class="line">            &lt;!--这里添加你要写的内容--&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="9-添加RSS"><a href="#9-添加RSS" class="headerlink" title="9. 添加RSS"></a>9. <strong>添加RSS</strong></h4><ul>
<li>先安装rss相关插件：<code>npm i hexo-generator-feed</code></li>
<li>在你的项目的<code>_config.yml</code>配置文件下找到Extensions添加如下内容：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Extensions  #插件和主题</div><div class="line">## Plugins: https://hexo.io/plugins/</div><div class="line">## Themes: https://hexo.io/themes/</div><div class="line">#RSS订阅</div><div class="line">plugin:</div><div class="line">- hexo-generator-feed</div><div class="line">#Feed Atom</div><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div></pre></td></tr></table></figure>
<ul>
<li>进入到你的主题的配置文件下，找到你的放rss的位置，添加<code>/atom.xml</code>即可。</li>
<li>重新部署再打开就能看到效果啦~</li>
</ul>
<h4 id="10-添加评论"><a href="#10-添加评论" class="headerlink" title="10. 添加评论"></a>10. <strong>添加评论</strong></h4><ul>
<li>先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。</li>
<li>在主题的配置文件下找到comment，添加一行，例如我添加的是<code>yungentie: 此处自由发挥</code></li>
<li>注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。</li>
</ul>
<p><img src="http://opif0c56u.bkt.clouddn.com/yungentie.png" alt="yungentie"></p>
<ul>
<li>找到你的article.ejs模板文件，加上<code>&lt;%- partial(&#39;comment/你刚刚取得名字&#39;) %&gt;</code>保存。</li>
<li>重新部署，OK啦</li>
</ul>
<h4 id="11-写文章部分"><a href="#11-写文章部分" class="headerlink" title="11. 写文章部分"></a>11. <strong>写文章部分</strong></h4><ul>
<li>新建文章：<code>hexo new &#39;文章名&#39;</code>，然后你就可以在<code>source/_posts</code>路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。</li>
<li>关于具体的文章编辑你可以看下<a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="external">官网的介绍</a></li>
<li>至于markdown，可以自行发挥啦~</li>
</ul>
<h3 id="小结一波"><a href="#小结一波" class="headerlink" title="小结一波"></a>小结一波</h3><ul>
<li>在哪里跌倒，就在哪里趴下，休息一会儿你会发现新大陆的哦~</li>
<li>本文针对的是从来没用hexo搭建过个人博客的小伙伴，不过文中可能会有一些小错误，欢迎大佬们指正，小花不胜感激！</li>
<li>感觉我好啰嗦啊，可是没办法，我就是这么爱打字丫</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://opif0c56u.bkt.clouddn.com/look-me.png?imageView/2/w/600/q/90&quot; alt=&quot;look me&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放
    
    </summary>
    
      <category term="Web开发" scheme="http://visugar.com/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端" scheme="http://visugar.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="hexo" scheme="http://visugar.com/tags/hexo/"/>
    
      <category term="hueman" scheme="http://visugar.com/tags/hueman/"/>
    
  </entry>
  
</feed>
