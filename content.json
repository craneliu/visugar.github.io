{"meta":{"title":"Visugar个人博客","subtitle":"书写前端，记录心情，以及碎碎念 ~","description":"前端技术，个人博客，记录心情,visugar","author":"张小花","url":"http://visugar.com"},"pages":[{"title":"","date":"2017-05-08T01:17:07.814Z","updated":"2017-05-06T12:16:34.247Z","comments":true,"path":"404.html","permalink":"http://visugar.com/404.html","excerpt":"","text":"404"},{"title":"更新日志","date":"2017-05-04T02:00:11.000Z","updated":"2017-05-07T09:48:31.139Z","comments":true,"path":"board/index.html","permalink":"http://visugar.com/board/index.html","excerpt":"","text":"2017-05-06《菜鸟张小花之多种前端布局实现》发布 2017-05-04《hexo从零开始到搭建完整》的完成 2017-05-04使用hexo搭建博客，使用的主题是hueman，有很多地方还不完善，后期继续努力！"},{"title":"关于我","date":"2017-05-04T03:35:11.000Z","updated":"2017-05-08T01:19:34.120Z","comments":true,"path":"about/index.html","permalink":"http://visugar.com/about/index.html","excerpt":"","text":"爱捣腾爱码字爱购物爱看剧爱五月天的可是啥也不会的女汉纸一枚 期待很多很多包辣条成为小花的嫁妆 ~"}],"posts":[{"title":"CSS3饼状loading效果","slug":"CSS3饼状loading效果","date":"2017-05-17T00:36:33.000Z","updated":"2017-05-17T00:57:28.334Z","comments":true,"path":"2017/05/17/CSS3饼状loading效果/","link":"","permalink":"http://visugar.com/2017/05/17/CSS3饼状loading效果/","excerpt":"","text":"写在前面（附录有源码及效果） 之前碰到一个小练习，就是用纯CSS3来写饼状的loading效果，之前着实没有写过这玩意儿，小花完全没头绪，然后参考了张鑫旭老师的CSS3实现鸡蛋饼饼状图loading等待转转转，还有些别的东西，用一种看起来有一点类似但是好像又不一样的方式完成了同样的效果，题目要求的大概就是这个样子： 开始琢磨了一下，睡一觉起来画了个图，理顺了一下，不过感觉此图有点难意会啊啊啊啊啊，没关系，小花会在后文一点一点解释哒~(红跟粉代表颜色，斜杠后面是z-index的值) 原理这个东西分为两部分：外圈和内圆。颜色这东西都自定义啦，不过我画的的圈圈好像有点太大，然后动画时间是随便设的，反正转起来看着感觉有点怪怪的额 先上html结构12345678910111213&lt;div class=&quot;con-wrap&quot;&gt; &lt;!--外圈--&gt; &lt;div class=&quot;out-round&quot;&gt;&lt;/div&gt; &lt;!--内圆，里面有半圆四个--&gt; &lt;div class=&quot;in-round&quot;&gt; &lt;div class=&quot;lt-round&quot;&gt;&lt;/div&gt; &lt;div class=&quot;lt-mask&quot;&gt;&lt;/div&gt; &lt;div class=&quot;rt-round&quot;&gt;&lt;/div&gt; &lt;div class=&quot;rt-mask&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 外圈和内圆是通过position定位重合在一起，实质上外圈转完2圈，内圆的红色和粉色才各转完1圈（内圆的全程包括红色从1到0、粉色从1到0），所以内圆的动画时间应该是外圈的两倍！！！ 外圈 外圈很简单，设置border-radius:50%即可画出一个圆，然后设置三条边框为红色，另外一条为透明，即画出了四分之三个圆边框（即外圆）。123456789.out-round &#123; width: 100px; height: 100px; border-radius: 50%; margin: 150px auto; border: 3px solid #FF298C; border-left: 3px solid transparent; animation: outRound 1s linear infinite running; &#125; 接下来是外圈的动画，为其设置的动画就是旋转一圈，infinite表示无限次12345678@keyframes outRound &#123; 0% &#123; transform: rotate(120deg) &#125; 100% &#123; transform: rotate(-240deg) &#125; &#125; 其中rotate(120deg)为旋转起始位置，可根据实际情况调整。 至此外圈就完成了，比较麻烦的是下面的内圆，不过根据图示应该是可以想象的。 内圆 此处有四个半圆，左边两个，右边两个（round为红色，mask为粉色），动画主要通过改变两个红色半圆的z-index值来控制各个半圆显示的优先顺序。内圆的css实现部分为：1234567891011121314151617/*左边两个半圆*/ .lt-round, .lt-mask &#123; position: absolute; width: 35px; height: 70px; border-radius: 35px 0 0 35px; transform-origin: right center; &#125; /*右边两个半圆*/ .rt-round, .rt-mask &#123; position: absolute; left: 50%; width: 35px; height: 70px; border-radius: 0 35px 35px 0; &#125; 下面过程描述内圆的动画全程（其中右边的粉色全程不需要动，右边红色部分只需要改变z-index的值来改变显示的优先级，从而实现显示和隐藏的效果来配合补充左半边的圆。）： 初始设置：12345红左 z-index：3粉1 z-index：2红右 z-index：1粉2 z-index：0 模型图： 视觉效果图(忽略中间的白线)： 左边红色旋转完180度时（逆时针旋转所以是360→180→0） 模型图： 视觉效果图： 左边红色转完到0度时（此时左右两边的红色半圆被粉色覆盖） 模型图： 视觉效果图： 粉色半圆重复之前红色半圆的动画（即左边粉色360→180→0） 模型图： 视觉效果图： 当左边粉色旋转到0度时，全部半圆回到了最初始的状态，整个动画即完成（在相同时间下外圈完成了2次的动画）。 模型图： 视觉效果图： 动画代码部分 前半程为左边红色旋转一周，后半程为粉色旋转一周。动画实现如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/*左边红色完成第一圈的旋转*/@keyframes ltRound &#123; 0% &#123; transform: rotate(360deg); &#125; 24.9% &#123; z-index: 3; &#125; 25% &#123; z-index: 1; transform: rotate(180deg); &#125; 50% &#123; transform: rotate(0deg); &#125; 74.9% &#123; z-index: 1; &#125; 75%, 100% &#123; z-index: 3; &#125; &#125;/*右边红色圆通过z-index来控制显示和隐藏，从而达到在适当时间配上左半圆的效果*/@keyframes rtRound &#123; 0%, 24.9% &#123; z-index: 1; &#125; 25% &#123; z-index: -3; &#125; 74.9% &#123; z-index: -3; &#125; 75%, 100% &#123; z-index: 1; &#125; &#125; /*左边粉色完成第二圈的旋转*/@keyframes ltMask &#123; 0%, 25%, 50% &#123; transform: rotate(360deg); &#125; 75% &#123; transform: rotate(180deg); &#125; 100% &#123; transform: rotate(0deg); &#125; &#125; 在全部代码未完成时，可以将动画时间设大一点，这样便于观察，搞完了再设回去就OK了。 由于动画是匀速变化的，但是z-index的值不能匀速变化，所以只能在某个很短时间内去改变z-index的值。这样才能达到效果（突然感觉这种实现好像也不是很好） 小结 没做兼容，在chrome中无异常，别的我就不太知道了 只是用来练习练习，实际上不一定会用到，但是里面几个知识点还是hei有用滴 小花是小白，对很多东西都还没整明白，欢迎大佬们指点指点~ 这几个图画的我心好累，sei能给小花推荐个好用点的额 源代码 源码地址 预览地址","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://visugar.com/categories/Web开发/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://visugar.com/tags/前端/"},{"name":"css3","slug":"css3","permalink":"http://visugar.com/tags/css3/"},{"name":"z-index","slug":"z-index","permalink":"http://visugar.com/tags/z-index/"}]},{"title":"RegExp（正则表达式）常用要点小结","slug":"RegExp（正则表达式）常用要点小结","date":"2017-05-11T08:17:05.000Z","updated":"2017-05-11T23:55:06.348Z","comments":true,"path":"2017/05/11/RegExp（正则表达式）常用要点小结/","link":"","permalink":"http://visugar.com/2017/05/11/RegExp（正则表达式）常用要点小结/","excerpt":"","text":"正文正则表达式用到的地方很多，但是每次很久不用就全忘光了，每次都要重新看一遍文档，为了节省时间，把它的一些基本要点画总结在一张图片中，这样方便以后查看。 PS：细节的东西还是需要看详细点的文档。","categories":[{"name":"划重点","slug":"划重点","permalink":"http://visugar.com/categories/划重点/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://visugar.com/tags/前端/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://visugar.com/tags/正则表达式/"},{"name":"文档","slug":"文档","permalink":"http://visugar.com/tags/文档/"}]},{"title":"中文技术文档规范-改自阮一峰老师","slug":"中文技术文档规范-改自阮一峰老师","date":"2017-05-10T01:08:30.000Z","updated":"2017-05-11T23:54:26.750Z","comments":true,"path":"2017/05/10/中文技术文档规范-改自阮一峰老师/","link":"","permalink":"http://visugar.com/2017/05/10/中文技术文档规范-改自阮一峰老师/","excerpt":"","text":"正文以前从来去想一篇技术文章要怎么架构，总是随自己想到什么写什么，然后看到了阮一峰老师的总结，就把它改成了思维导图，以便记忆查询。 原文地址：https://github.com/ruanyf/document-style-guide","categories":[{"name":"划重点","slug":"划重点","permalink":"http://visugar.com/categories/划重点/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://visugar.com/tags/前端/"},{"name":"文档","slug":"文档","permalink":"http://visugar.com/tags/文档/"},{"name":"写作规范","slug":"写作规范","permalink":"http://visugar.com/tags/写作规范/"}]},{"title":"菜鸟张小花之多种前端布局实现","slug":"菜鸟张小花之多种前端布局实现","date":"2017-05-06T08:09:57.000Z","updated":"2017-05-11T23:59:37.472Z","comments":true,"path":"2017/05/06/菜鸟张小花之多种前端布局实现/","link":"","permalink":"http://visugar.com/2017/05/06/菜鸟张小花之多种前端布局实现/","excerpt":"写在前面 由于知识有限，有的内容可能有点小错误什么的，仅供参考参考，欢迎大佬们指正","text":"写在前面 由于知识有限，有的内容可能有点小错误什么的，仅供参考参考，欢迎大佬们指正，小花在这里谢过~ 小贴士（to freshman）：给每个块都加上颜色，更好辨识。 关于代码：这里给出的都是css部分，html部分用最常规的结构就好啦 1. 水平居中 方法一：margin:0 auto; （最常用的居中布局方式） 方法二：text-align和inline-block的结合（设置父元素的text-align为center）。 这种方式最好应用于图片、按钮、文字之类的居中模式，否则就需要借助inline-block来进行居中布局。 方法三：position绝对定位来实现居中布局。 适用于块级元素不给出宽高的情况下(需要借助transtrom的tanslateX方法)。 123456789#parent&#123; position: relative;&#125;#child&#123; position: absolute; top: 0; left: 50%; transform: translateX(-50%);&#125; 方法四：利用flex弹性布局的一个属性。 子元素宽度已知的情况下 1234#parent&#123; display: flex; justify-content: center;&#125; 其他还有很多方法，一般用的不太多。并且各种方法优缺点不一样，可选择性使用。 2. 水平居中及垂直居中 方法一：先说一种神奇的方式吧， 子元素 div 绝对定位 父元素需要被定位 子元素 top、bottom、left、right 四个位置值均为 0 子元素 margin: auto; 下面代码是可以实现的，但还有点问题，大家帮小花看看~ 12345678910111213141516#parent&#123; width: 100%; height:100%; position: fixed;&#125;#child&#123; width: 400px; height: 200px; position: absolute; top: 0; bottom: 0; left: 0; right: 0; margin: auto; background-color: #ccc;&#125; 方式二：利用position的绝对定位及负边框来实现。123456789101112131415 #parent&#123; position: fixed; width: 100%; height: 100%;&#125;#child&#123; position: absolute; left: 50%; top: 50%; width: 400px; height: 200px; margin-top: -100px; margin-left: -200px; background-color: #ccc;&#125; 对于未给出宽高的元素，又需要请transform登场了，同时需要做好各浏览器的兼容。对于我这种懒癌患者，就不给出兼容代码嘞~ 其他应该还有一些方法，暂时还没想到，等写出来了再补补（哦对了，忘了说flex了，算了还是不写了） 3. 左边固定右边自适应的两列布局我猜吧，大家对这种布局方式最熟悉不过了，平时用的也会比较多，所以呢，你们写的应该都会比我的好~ 方式一：float+margin的方式 这种方式一定要记得给父元素清除浮动啊，不然就尴尬了呢，这里插播一种全局性(这个词似乎不太对)的清除浮动的伪元素方法. 1234567891011.clearfix:after &#123; content: &apos;.&apos;; height: 0; overflow: hidden; clear: both; display: block; visibility: hidden;&#125;.clearfix &#123; zoom: 1; &lt;!--hack--&gt;&#125; 看起来有点小复杂啊，这里不分析这种方法的原理，记住就好了。当然你也可以直接借助触发BFC的方式来解决（偷偷告诉你，常用的方式就是给你的父元素设置overflow: hidden;啦）。 哦+语气~好像跑偏了，说好的布局呢，见下诉代码： 1234567#left&#123; float: left; width: 100px;&#125;#right&#123; margin-left: 120px;&#125; 方式二：float+overflow的方式 这就是传说中利用BFC的规则来实现两列布局啊啊啊！ 这种方式直接不需要清除浮动什么的就可以了，也不会影响前后文，用起来比较爽丫。 12345678#left&#123; float: left; width: 100px; margin-right: 20px; &lt;!--好歹留个空啊嘿嘿--&gt;&#125;#right&#123; overflow: hidden;&#125; 方式三：float+margin+position的方式 这个方式呢也用到过，但是要考虑的比较多一点，不过其实也还好。接下来请看实现代码：1234567891011121314#parent&#123; position: relative;&#125;#left&#123; float: left; width: 100px; background-color: #ccc;&#125;#right&#123; position: absolute; top: 0; left: 120px; background-color:pink;&#125; 这种方式实现起来很简单，但是对后文是有影响的，需要自己解决一下，懒小花就不写啦~ 方式四：flex方式 这个呢，坑肯定是比较多的，建议用在小范围的布局，当然某些时候用起来确实比较爽歪歪啦 12345678910#parent&#123; display: flex;&#125;#left&#123; width: 100px; margin-right: 20px;&#125;#right&#123; flex: 1;&#125; 其他的吧，我暂时还没用到也没写到~网上一搜会有好多好多精讲的。 4. 左边自适应右边固定话说其实我就只写了一种方法，我都有点不好意思放上来了，不管了，小花的脸皮比较厚，不怕！ 方式一： 当然还是position反正很多情况都可以用position来解决，但是，同时也会有一些其他问题出现，所以，自行思考用不用~123456789101112#parent &#123; position: relative;&#125;#left &#123; margin-right:220px;&#125;#right &#123; position: absolute; right:0; top:0; width: 200px;&#125; 5. 两边固定中间自适应的三列布局其实这个布局用的也挺多的啊哈，嗯，昨天写的作业就是这个！ 方式一：纯float方式 注意： 左侧元素与右侧元素优先渲染，分别向左和向右浮动 中间元素在文档流的最后渲染，自动插入到左右两列元素的中间，随后设置 margin 左右边距分别为左右两列的宽度，将中间元素调整到正确的位置。 12345678910111213.left&#123; float: left; width: 200px; height: 200px;&#125;.right&#123; float: right; width: 100px; height: 100px;&#125;.middle&#123; margin:0 120px 0 220px;&#125; 但凡用float的时候都要想一下父元素上清除浮动这个问题！ 方式二：position的绝对定位 其实感觉跟float的原理差不多，都是将左右两侧的块先固定好，再对中间部分进行处理，只不过自己可以在不同情况下选择float或者position。 1234567891011121314151617181920.parent&#123; position: relative;&#125;.left&#123; position: absolute; width: 200px; height: 200px; top: 0; left: 0;&#125;.right&#123; position: absolute; top: 0; right: 0; width: 100px; height: 100px;&#125;.middle&#123; margin:0 120px 0 220px;&#125; 方式三：flex的弹性布局 不得不说的是其实很多布局都可以用flex来实现(简单粗暴嘿嘿)，但是flex的兼容性不是很好，并且还有别问题，所以保险起见还是选择常用的，这里简单介绍下。123456789101112131415.parent&#123; display: flex;&#125;.left&#123; width: 200px; height: 200px;&#125;.right&#123; width: 100px; height: 100px;&#125;.middle&#123; flex: 1; margin:0 20px;&#125; 方式四：最后该淘宝的双翼布局闪亮登场了 要注意的是这种布局方式需要将主栏优先渲染，然后再加上两边的翅膀，即双翼，不过话又说话来，虽然小花是按照这个套路写的，但也不确定自己写的就是双翼布局。为了不误人子弟，在这先说明只是参考参考哟（欢迎大佬纠正）~ 第一步，先将主栏左浮动，并设宽度为100%，即铺满父元素 第二步，将左栏左浮动，并设左外边距为-100% 第三步，将右栏左浮动，并设左外边距为负的自身宽度 第四步，设置主栏，嘿嘿，这时候不管你使用什么方法都达不到效果，解决办法就是给主栏的内容加一个包裹层，并设左右外边距为左右两侧的宽度。 第五步，好了，完美！（但是别忘了，要清除浮动哦~） 6. 是时候小结一波了 首先，每种方式都小试了一下，基本上效果是可以达到的，当然实际情况中会比较复杂，你会遇到各种各样的麻烦，祝你好运~ 每种方式的优缺点其实对于我这种萌新来说也是比较懵，只是这几天写了几个作业才想到要小小总结下的 第一次用markdown写文字棒棒哒，不要介意某写地方可能写错了","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://visugar.com/categories/Web开发/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://visugar.com/tags/前端/"},{"name":"CSS布局","slug":"CSS布局","permalink":"http://visugar.com/tags/CSS布局/"},{"name":"web","slug":"web","permalink":"http://visugar.com/tags/web/"}]},{"title":"hexo从零开始到搭建完整","slug":"hexo从零开始到搭建完整","date":"2017-05-04T08:16:15.000Z","updated":"2017-05-11T23:54:56.259Z","comments":true,"path":"2017/05/04/hexo从零开始到搭建完整/","link":"","permalink":"http://visugar.com/2017/05/04/hexo从零开始到搭建完整/","excerpt":"前言其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放","text":"前言其实平时自己写的文章并不多，偶尔看到一些东西会做点笔记，但是每次写的东西都会到处放，不好找，所以才想着自己搭建一个人博客网站，现在大家用hexo比较多，也比较方便，并且能使用的主题也很多，所以小花就用她啦~ 耍起来由于小花的电脑在搭建博客之前就有了各种环境，但是对于没有任何基础的人来讲，我觉得还是从源头开始讲会好一点，就像教别人做菜，总得把所有的用料及步骤说清楚对吧？（大佬们可以自动忽略啊啊啊啊~） 1. 安装Git Bash我一直不太喜欢在cmd中操作各种命令，所以挑了这个比较好使的Git Bash, 我的是windows环境，所以下载windows版本并安装就可以了。 下载地址 安装步骤：双击下载好的exe文件，一路next就好啦 安装好后，打开gitbash，查看版本： 命令：git version (写这篇博客的时候最新版本：2.12.2) 然后你就可以在这里发挥你的聪明才智了 2. 安装NodeJsHexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧 下载地址(说明：LTS为长期支持版，Current为当前最新版) 安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。 查看版本： 命令：node -v 又到自由发挥的时候了 3. 安装hexo看到这么多安装，千万不要紧张，小哥哥小姐姐们一定要稳住，别怕，因为后面的东西都是在gitbash中用npm工具安装就好了。 先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下。 安装hexo命令：npm i -g hexo 安装完成后，查看版本： 初始化命令：hexo init ，初始化完成之后打开所在的文件夹可以看到以下文件： 解释一下： node_modules：是依赖包 public：存放的是生成的页面 scaffolds：命令生成文章等的模板 source：用命令创建的各种文章 themes：主题 _config.yml：整个博客的配置 db.json：source解析所得到的 package.json：项目所需模块项目的配置信息 做好这些前置工作之后接下来的就是各种配配配置了。 4. 搭桥到github 没账号的创建账号，有账号的看下面。 创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下： 回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）： 创建SSH在gitbash中输入：ssh-keygen -t rsa -C &quot;youremail@example.com，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容。 将上面获取的ssh放到github中： 添加一个 New SSH key ，title随便取，key就填刚刚那一段。 在gitbash中验证是否添加成功：ssh -T git@github.com 完成下一步你就成功啦！ 5. 一步之遥 用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)： 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 回到gitbash中，进入你的blog目录，分别执行以下命令：123hexo cleanhexo generatehexo server 注：hexo 3.0把服务器独立成个别模块，需要单独安装：npm i hexo-server。 打开浏览器输入：http://localhost:4000 接着你就可以遇见天使的微笑了~ 6. 上传到github 先安装一波：npm install hexo-deployer-git --save（这样才能将你写好的文章部署到github服务器上并让别人浏览到） 执行命令(建议每次都按照如下步骤部署)：123hexo cleanhexo generatehexo deploy 注意deploy的过程中要输入你的username及passward。如下： 在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！ 感觉gitbash中东西太多的时候输入clear命令清空。 7. 绑定个人域名 不想绑定的自行忽略 第一步购买域名：随便在哪个网站买一个就好了，小花是在阿里云购买的visugar.com, DNS也是顺道在那买的。 第二步添加CNAME：在项目的source文件夹下新建一个名为CNAME的文件，在里面添加你购买的域名，比如我添加的是visugar.com，只能添加一个哦。 到DNS中添加一条记录： 其中ip地址为你的github的地址，可在cmd中ping一下就能看到(ping yourname.github.io)： 接着再次部署一下，用你购买的域名打开，就可以看到你的博客啦~ 8. 修改及配置主题 hexo初始化之后默认的主题是landscape , 然后你可以去这个地址里面找到你想要的主题。在github中搜索你要的主题名称，里面都会有该主题的如何使用的介绍，按着来就好了，反正就是改改改！我选的是hueman,看起来挺不错，至少是我喜欢的类型。 跟该主题相关的配置在themes/hueman/_config.yml里面,然后根据你的需要在这配配配就行了。 有的东西我也不知道是啥玩意儿，你要多试多倒腾几次，就能意会啦 下面是针对我所选的主题的两小点(别的主题我没看，可能也是类似): 在导航栏添加点东西 例如我添加了一个更新日志的模块。 在主题的配置文件中，menu添加一栏：Board: /board。 然后在source中添加一个board，即对应上面的名字。然后再创建一个index.md，里面可以写你想写的内容。 在主题的hueman/langulages/zh-CN.yml中的index适当的位置加：board: &#39;更新日志&#39;，位置和名字是你自己设定。 重新部署，然后就OK了 在侧边栏添加点东西 回到你的主题的配置文件中，找到widgets一栏，在你要添加的位置处添加一条你自定义的名称。例如我的叫communiation且放在了第二行。 在上面所提到的zh-CN.yml文件中找到sidebar一栏，添加communiation: &#39;你要设的名称&#39;。 在hueman/layout/widget中添加一个communiation.ejs,填入模板12345678&lt;% if (site.posts.length) &#123; %&gt; &lt;div class=&quot;widget-wrap widget-list&quot;&gt; &lt;h3 class=&quot;widget-title&quot;&gt;&lt;%= __(&apos;sidebar.communiation&apos;) %&gt;&lt;/h3&gt; &lt;div class=&quot;widget&quot;&gt; &lt;!--这里添加你要写的内容--&gt; &lt;/div&gt; &lt;/div&gt;&lt;% &#125; %&gt; 9. 添加RSS 先安装rss相关插件：npm i hexo-generator-feed 在你的项目的_config.yml配置文件下找到Extensions添加如下内容： 1234567891011# Extensions #插件和主题## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed: type: atom path: atom.xml limit: 20 进入到你的主题的配置文件下，找到你的放rss的位置，添加/atom.xml即可。 重新部署再打开就能看到效果啦~ 10. 添加评论 先选一个你要使用的第三方评论系统，最好找个靠谱点的（我使用的是网易云跟帖）。 在主题的配置文件下找到comment，添加一行，例如我添加的是yungentie: 此处自由发挥 注册完评论系统后获取相应的代码，然后在主题的layout下找到comment新建一个ejs模板文件，名称自定义。 找到你的article.ejs模板文件，加上&lt;%- partial(&#39;comment/你刚刚取得名字&#39;) %&gt;保存。 重新部署，OK啦 11. 写文章部分 新建文章：hexo new &#39;文章名&#39;，然后你就可以在source/_posts路径下看到你创建的文章啦，编辑完成之后按照前面说的方式部署，在浏览器刷新就能看到你的文章了。 关于具体的文章编辑你可以看下官网的介绍 至于markdown，可以自行发挥啦~ 小结一波 在哪里跌倒，就在哪里趴下，休息一会儿你会发现新大陆的哦~ 本文针对的是从来没用hexo搭建过个人博客的小伙伴，不过文中可能会有一些小错误，欢迎大佬们指正，小花不胜感激！ 感觉我好啰嗦啊，可是没办法，我就是这么爱打字丫","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://visugar.com/categories/Web开发/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://visugar.com/tags/前端/"},{"name":"hexo","slug":"hexo","permalink":"http://visugar.com/tags/hexo/"},{"name":"hueman","slug":"hueman","permalink":"http://visugar.com/tags/hueman/"}]}]}